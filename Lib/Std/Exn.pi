# line 1 "/home/pierce/pict/Lib/Std/Exn.src"


  import "Std/Error"
  import "Std/Prim"





  val [



  #Handler = \X:Neg Type = /X
  #Exn = (Handler String)







  exn:[



  fail = /[String /(Handler Top)]





  ignore = (Handler Top)




  exit = Exn





  tag = /[Exn String /Exn]






  rename = /[Exn String /Exn]





  raise = /[#X (Handler X) X /Bot]






  suspend = /[#X #Y (Handler [X /Y]) X /Y]







  try = /[#X #Y /[(Handler X) /Y] /[X /Y] /Y]








    
]] = (

type (Handler X:Neg Type) = /X
type Exn = (Handler String)

inline def fail (s:String):(Handler Top) =
  \_ = error.fail!s

val ignore:(Handler Top) =
  \_ = ()

val exit:(Handler String) =
  \s = error.fail!s

inline def tag (h:(Handler String) comment:String) : (Handler String) =
  \s = h!(prim.+$ > comment ": " s)

inline def rename (h:(Handler String) name:String) : (Handler String) =
  \_ = h!name

inline def raise [#X h:(Handler X) x:X res:/Bot] = h!x
inline def suspend [#X #Y h:(Handler [X /Y]) x:X res:/Y] = h![x res]

inline def try [#X #Y body:/[(Handler X) /Y] handler:/[X /Y] res:/Y] =
  body![\x = handler![x res] res]

[[fail=fail ignore=ignore exit=exit tag=tag rename=rename raise=raise
  suspend=suspend try=try]]

)

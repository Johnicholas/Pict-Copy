# line 1 "/home/pierce/pict/Lib/Std/Hash.src"


  import "Std/Int"
  import "Std/List"
  import "Std/Array"
  import "Std/Opt"

  val [



  #Hash : (Type Type -> Type)







  hash:[



  make = /[#K #V /[K /Int] /[K K /Bool] /(Hash K V)]







  lookup = /[#K #V (Hash K V) K /V]





  tryLookup = /[#K #V (Hash K V) K /(Opt V)]





  lookupDefault = /[#K #V (Hash K V) K V /V]








   insert = /[#K #V (Hash K V) K V Sig]







  remove = /[#K #V (Hash K V) K Sig]





    
]]
= (

type (Hash K V) =
  [/[K /Int] /[K K /Bool] (Array (List [K V])) Int]

def make (#K #V hash:/[K /Int] eq:/[K K /Bool]) : (Hash K V) =
  [hash eq (array.make #(List [K V]) nil 128) 127]{-HACK-}

def lookup (#K #V h:(Hash K V) key:K) : V =
  (val [hash eq a mask] = h

   def find (l:(List [K V])):V =
     if (null l) then
       (error.fatal "lookupHash: Key not found")
     else
       (val [k v] = (list.unsafeCar l)
        if (eq k key) then v else (find (list.unsafeCdr l)))

   (find (array.unsafeNth a (int.land (hash key) mask))))

def tryLookup (#K #V h:(Hash K V) key:K) : (Opt V) =
  (val [hash eq a mask] = h
   def find (l:(List [K V])):(Opt V) =
     if (null l) then
       opt.no
     else
       (val [k v] = (list.unsafeCar l)
        if (eq k key) then (opt.yes v)
        else (find (list.unsafeCdr l)))
   (find (array.unsafeNth a (int.land (hash key) mask))))

def lookupDefault (#K #V h:(Hash K V) key:K dflt:V) : V =
  (val [hash eq a mask] = h
   def find (l:(List [K V])):V =
     if (null l) then
       dflt
     else
       (val [k v] = (list.unsafeCar l)
        if (eq k key) then v else (find (list.unsafeCdr l)))
   (find (array.unsafeNth a (int.land (hash key) mask))))

def insert (#K #V h:(Hash K V) key:K v:V) : [] =
  (val [hash eq a mask] = h
   val x = (int.land (hash key) mask)
   (array.unsafeUpdate a x (cons [key v] (array.unsafeNth a x))))

def remove (#K #V h:(Hash K V) key:K) : [] =
  (val [hash eq a mask] = h
   val x = (int.land (hash key) mask)
   def find (l:(List [K V])):(List [K V]) =
     if (null l) then
       (error.fatal "removeHash: Key not found")
     else
       (val item@[k v] = (list.unsafeCar l)
       if (eq k key) then (list.unsafeCdr l)
       else (cons item (find (list.unsafeCdr l))))
   (array.unsafeUpdate a x (find (array.unsafeNth a x))))

[#Hash
 [make=make lookup=lookup tryLookup=tryLookup lookupDefault=lookupDefault
 insert=insert remove=remove]]

)

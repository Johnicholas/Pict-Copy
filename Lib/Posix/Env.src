\section{@Posix/Env@: Environment Variables}
\label{s:Env}

This module provides some simple functions for examining the environment
variable bindings for the current Unix process.

##import "Std/Exn"
##import "Std/Misc"
##import "Std/List"
##import "Std/String"

##val env : [

#*get = /[String Exn /String]
\begin{doc}
@(get n h)@ searches the environment list for a string that matches the
name @n@, calling the given error handler if no match could be found.
\end{doc}

#*toList = /[/(List String)]
\begin{doc}
@(toList)@ returns a list of all environment entries.  Each entry is of the
format @NAME=value@.  The order in which strings appear in the environment
is not significant, but the same @NAME@ must not appear more than once.
\end{doc}

#{#}
] = (

(ccode 0 I "extern char **environ;");

inline
def get (n:String fail:Exn) : String =
  (val s:CString = (ccode 0 P "(Val)getenv(S(#))" n)
   if (prim.nullPtr s) then (exn.raise fail (+$ > "env.get(" n ")"))
   else (prim.fromCString s))

def toList () : (List String) =
  (def loop (x:Int) : (List String) =
     (val e:CString = (ccode 0 P "(Val)environ[I(#)]" x)
      if (prim.nullPtr e) then nil
      else (cons (prim.fromCString e) (loop (inc x))))
   (loop 0))

[get=get toList=toList]
)

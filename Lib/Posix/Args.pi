# line 1 "/home/pierce/pict/Lib/Posix/Args.src"


  import "Std/Int"
  import "Std/Bool"
  import "Std/Exn"
  import "Std/List"
  import "Std/Misc"
  import "Std/Opt"
  import "Std/String"





  val [



  #Spec = [String String]







   args : [



  argc = Int




  argv = /[Int /String]







  getListOpt =
    /[(List Spec) (List Spec) (List Spec) (List String) Exn
       /[/[String Exn /Int]
         /[String Exn /String]
         /[String /Bool]
         (List String)]]














































  getOpts =
    /[(List Spec) (List Spec) (List Spec) Exn
       /[/[String Exn /Int]
         /[String Exn /String]
         /[String /Bool]
         (List String)]]








    
]] = (

val argc : Int = (ccode 0 P "intInt(ArgC)")

def argv (n:Int) : String =
  ((error.check "argv: index out of range\n" (&& (>= n 0) (<< n argc)));
   (prim.fromCString (ccode 0 P "(Val)ArgV[I(#)]" n)))

type Spec = [String String]

def getListOpt
  (intSpecs:(List Spec) strSpecs:(List Spec) unitSpecs:(List Spec)
   args:(List String) fail:Exn)
  : [/[String Exn /Int]
     /[String Exn /String]
     /[String /Bool]
     (List String)]
= (def findSpec (n:String specs:(List Spec)) : (Opt Spec) =
     if (null specs) then
       opt.no
     else
       (val info@[name alias] = (car specs)
        if (|| (==$ name n) (==$ alias n)) then
          (opt.yes info)
        else
          (findSpec n (cdr specs)))

   type R = 
     [(List [Spec Int]) (List [Spec String])
      (List [Spec Bool]) (List String)]

   def parse
     (l:(List String) ints:(List [Spec Int]) str:(List [Spec String])
      bool:(List [Spec Bool]) rem:(List String)):R
    =
     if (null l) then
       [ints str bool (list.rev rem)]
     else
       (val a = (car l)
        val l = (cdr l)
        if (==$ a "-") then
          (parse l ints str bool (cons "-" rem))
        else if (==$ a "--") then
          [ints str bool (list.append (list.rev rem) l)]
        else if (string.prefix "-" a) then
          (val n = (string.sub a 1 (dec (string.size a)))
           (opt.case (findSpec n unitSpecs)
            \():R =
              (opt.case (findSpec n strSpecs)
               \():R =
                 (opt.case (findSpec n intSpecs)
                  \():R =
                    (exn.raise fail (+$ > "Unrecognised option -" n))
                  \(s:Spec):R =
                    if (null l) then
                      (exn.raise fail
                       (+$ > "Option -" n " needs an integer argument"))
                    else
                      (val x =
                         (exn.try #String #Int
                          \(h) = (int.fromString (car l) h)
                          \(_) =
                            (exn.raise fail
                             (+$ > "Option -" n " needs an integer argument")))
                       (parse (cdr l) (cons [s x] ints) str bool rem)))
               \(s:Spec):R =
                 if (null l) then
                   (exn.raise fail (+$ > "Option -" n " needs an argument"))
                 else
                   (parse (cdr l) ints (cons [s (car l)] str) bool rem))
            \(s:Spec):R =
               (parse l ints str (cons [s true] bool) rem)))
        else
          (parse l ints str bool (cons a rem)))

   val [ints str bool rem] = (parse args nil nil nil nil)

   def lookupArg (#X n:String args:(List [Spec X]) fail:Exn) : X =
     if (null args) then
       (exn.raise fail (+$ > "Option -" n " was not specified"))
     else
       (val [[name alias] x] = (car args)
        if (|| (==$ name n) (==$ alias n)) then x
        else (lookupArg n (cdr args) fail))

   [\(n fail) = (lookupArg n ints fail)
    \(n fail) = (lookupArg n str fail)
    \(n) = (exn.try #String #Bool \(h) = (lookupArg n bool h) \(_) = false)
    rem])

def getOpts
  (intSpecs:(List Spec) strSpecs:(List Spec) unitSpecs:(List Spec)
   fail:Exn)
  : [/[String Exn /Int]
     /[String Exn /String]
     /[String /Bool]
     (List String)]
= (getListOpt intSpecs strSpecs unitSpecs
   (list.tabulate #String (dec argc) \(x) = (argv (inc x))) fail)

[[argc=argc argv=argv getListOpt=getListOpt getOpts=getOpts]]

)

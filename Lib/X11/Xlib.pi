# line 1 "/home/pierce/pict/Lib/X11/Xlib.src"


  import "Std/Bool"
  import "Std/Exn"
  import "Std/Opt"
  import "Std/External"
  import "Posix/Fd"







  val [



  #Display


  #ScreenNum





  #XID





  #XContext : (Type -> Type)





  #Xfunction







  #Color






  #Font






  #TextExtents =
    [fontAscent = Int
     fontDescent = Int
     lbearing = Int
     rbearing = Int
     width = Int
     ascent = Int
     descent = Int]




  #GC





  #Drawable < XID





  #Pixmap < Drawable





  #Window < Drawable







  #Geometry =
    [x = Int
     y = Int
     width = Int
     height = Int
     borderWidth = Int
     depth = Int]





  #KeySym < Int





  #Button


  #XEvent





  #EventMask





  xlib:[



  openDisplay = /[String Exn /Display]







  closeDisplay = /[Display Sig]








  displayFd = /[Display /Fd]






  synchronize = /[Display Bool Sig]






  flush = /[Display Sig]










  defaultScreen = /[Display /ScreenNum]




  defaultDepth = /[Display ScreenNum /Int]







  uniqueContext = /[#X /(XContext X)]





  findContext = /[#X Display XID (XContext X) Exn /X]






  saveContext = /[#X Display XID (XContext X) X Sig]





  deleteContext = /[#X Display XID (XContext X) Exn Sig]








  gXclear = Xfunction           {- 0                       -}
  gXand = Xfunction             {- src AND dst             -}
  gXandReverse = Xfunction      {- src AND NOT dst         -}
  gXcopy = Xfunction            {- src                     -}
  gXandInverted = Xfunction     {- (NOT src) AND dst       -}
  gXnoop = Xfunction            {- dst                     -}
  gXxor = Xfunction             {- src XOR dst             -}
  gXor = Xfunction              {- src OR dst              -}
  gXnor = Xfunction             {- (NOT src) AND (NOT dst) -}
  gXequiv = Xfunction           {- (NOT src) XOR dst       -}
  gXinvert = Xfunction          {- NOT dst                 -}
  gXorReverse = Xfunction       {- src OR (NOT dst)        -}
  gXcopyInverted = Xfunction    {- NOT src                 -}
  gXorInverted = Xfunction      {- (NOT src) OR dst        -}
  gXnand = Xfunction            {- (NOT src) OR (NOT dst)  -}
  gXset = Xfunction             {- 1                       -}








  colorRed = /[Color /Int]
  colorGreen = /[Color /Int]
  colorBlue = /[Color /Int]






  allocColor = /[Display ScreenNum Int Int Int (Handler [Int Int Int]) /Color]










  allocNamedColor = /[Display ScreenNum String Exn /Color]









  loadQueryFont = /[Display String Exn /Font]






  freeFont = /[Display Font Sig]





  textExtents = /[Font String /TextExtents]







  defaultGC = /[Display ScreenNum /GC]




  setBackground = /[Display GC Color Sig]




  setForeground = /[Display GC Color Sig]




  setFunction = /[Display GC Xfunction Sig]




  setFont = /[Display GC Font Sig]






  getGeometry = /[Display Drawable /Geometry]






  copyArea = /[Display Drawable Drawable GC Int Int Int Int Int Int Sig]


















  copyPlane = /[Display Drawable Drawable GC Int Int Int Int Int Int Int Sig]









  drawArc = /[Display Drawable GC Int Int Int Int Int Int Sig]
  fillArc = /[Display Drawable GC Int Int Int Int Int Int Sig]














  drawImageString = /[Display Drawable GC Int Int String Sig]









  drawLine = /[Display Drawable GC Int Int Int Int Sig]





  drawPoint = /[Display Drawable GC Int Int Sig]




  drawQuad = /[Display Drawable GC Int Int Int Int Int Int Int Int Sig]
  fillQuad = /[Display Drawable GC Int Int Int Int Int Int Int Int Sig]






  drawRectangle = /[Display Drawable GC Int Int Int Int Sig]
  fillRectangle = /[Display Drawable GC Int Int Int Int Sig]







  drawString = /[Display Drawable GC Int Int String Sig]








  drawTriangle = /[Display Drawable GC Int Int Int Int Int Int Sig]
  fillTriangle = /[Display Drawable GC Int Int Int Int Int Int Sig]








  createPixmap = /[Display Drawable Int Int Int /Pixmap]











  freePixmap = /[Display Pixmap Sig]







  createWindow = /[Display Window Int Int Int Int Int Color Color /Window]











  defaultRootWindow = /[Display /Window]




  destroyWindow = /[Display Window Sig]






  mapWindow = /[Display Window Sig]








  unmapWindow = /[Display Window Sig]






  moveWindow = /[Display Window Int Int Sig]









  resizeWindow = /[Display Window Int Int Sig]








  moveResizeWindow = /[Display Window Int Int Int Int Sig]





  clearWindow = /[Display Window Sig]





  clearArea = /[Display Window Int Int Int Int Bool Sig]











  setWindowBackground = /[Display Window Color Sig]






  setWindowBackgroundPixmap = /[Display Window Pixmap Sig]






  setWindowBorder = /[Display Window Color Sig]




  setWindowBorderWidth = /[Display Window Int Sig]




  storeName = /[Display Window String Sig]










  withdrawWindow = /[Display Window ScreenNum /Bool]











  XKHome  = KeySym
  XKLeft  = KeySym
  XKRight = KeySym
  XKUp    = KeySym
  XKDown  = KeySym







  button1 = Button
  button2 = Button
  button3 = Button
  button4 = Button
  button5 = Button




  eqButton = /[Button Button /Bool]




  buttonString = /[Button /String]






  allocEvent = /[/XEvent]





  nextEvent = /[Display XEvent Sig]





  pending = /[Display /Int]







  isExpose = /[XEvent /Bool]
  exposeEventWindow = /[XEvent /Window]
  exposeEventX = /[XEvent /Int]
  exposeEventY = /[XEvent /Int]
  exposeEventW = /[XEvent /Int]
  exposeEventH = /[XEvent /Int]






  isButtonPress = /[XEvent /Bool]
  isButtonRelease = /[XEvent /Bool]
  buttonEventWindow = /[XEvent /Window]
  buttonEventX = /[XEvent /Int]
  buttonEventY = /[XEvent /Int]
  buttonEventButton = /[XEvent /Button]






  isButtonMotion = /[XEvent /Bool]
  buttonMotionEventWindow = /[XEvent /Window]
  buttonMotionEventX = /[XEvent /Int]
  buttonMotionEventY = /[XEvent /Int]
  buttonMotionEventTime = /[XEvent /Int]






  isConfigureNotify = /[XEvent /Bool]
  configureEventWindow = /[XEvent /Window]
  configureEventX = /[XEvent /Int]
  configureEventY = /[XEvent /Int]
  configureEventW = /[XEvent /Int]
  configureEventH = /[XEvent /Int]






  isKeyPress = /[XEvent /Bool]
  isKeyRelease = /[XEvent /Bool]
  keyEventWindow = /[XEvent /Window]
  keyEventX = /[XEvent /Int]
  keyEventY = /[XEvent /Int]
  keyEventString = /[XEvent /String]
  keyEventKeySym = /[XEvent /KeySym]








  noEventMask = EventMask
  keyPressMask = EventMask
  keyReleaseMask = EventMask
  buttonPressMask = EventMask
  buttonReleaseMask = EventMask
  enterWindowMask = EventMask
  leaveWindowMask = EventMask
  pointerMotionMask = EventMask
  pointerMotionHintMask = EventMask
  button1MotionMask = EventMask
  button2MotionMask = EventMask
  button3MotionMask = EventMask
  button4MotionMask = EventMask
  button5MotionMask = EventMask
  buttonMotionMask = EventMask
  keymapStateMask = EventMask
  exposureMask = EventMask
  visibilityChangeMask = EventMask
  structureNotifyMask = EventMask
  resizeRedirectMask = EventMask
  substructureNotifyMask = EventMask
  substructureRedirectMask = EventMask
  focusChangeMask = EventMask
  propertyChangeMask = EventMask
  colormapChangeMask = EventMask
  ownerGrabButtonMask = EventMask





  selectInput = /[Display Window EventMask Sig]








  mergeMasks = /[EventMask EventMask /EventMask]






  bell = /[Display Int Sig]










    
]] = (

(ccode 0 I "##include <string.h>");
(ccode 0 I "##include <X11/Xlib.h>");
(ccode 0 I "##include <X11/Xresource.h>");
(ccode 0 I "##include <X11/Xutil.h>");
(ccode 0 I "##include <X11/keysym.h>");
(ccode 0 I "##include <X11/keysymdef.h>");

type Geometry =
  [x = Int
   y = Int
   width = Int
   height = Int
   borderWidth = Int
   depth = Int]

type TextExtents =
  [fontAscent = Int
   fontDescent = Int
   lbearing = Int
   rbearing = Int
   width = Int
   ascent = Int
   descent = Int]

val [#Display] = [#Top]

inline
def openDisplay (name:String onError:Exn) : Display 
= (val d:Display = (ccode 0 W "(Val)XOpenDisplay(S(#))" name)
   if (prim.nullPtr d) then
     (exn.raise onError "xOpenDisplay: could not open display")
   else d)

inline
def closeDisplay (d:Display) : []
= (ccode 0 E "XCloseDisplay(D(#));" d)

inline
def displayFd (d:Display) : Fd
= (ccode 0 P "intInt(ConnectionNumber(D(#)))" d)

inline
def synchronize (d:Display onOff:Bool) : []
= (ccode 0 E "XSynchronize(D(#),#);" d onOff)

inline
def flush (d:Display) : []
= (ccode 0 E "XFlush(D(#));" d)

val [#ScreenNum] = [#Top]

inline
def defaultScreen (d:Display) : ScreenNum 
= (ccode 0 P "intInt(XDefaultScreen(D(#)))" d)

inline
def defaultDepth (d:Display s:ScreenNum) : Int
= (ccode 0 P "intInt(XDefaultDepth(D(#),I(#)))" d s)

val [#XID] = [#Top]

val [#XContext:(Type->Type)] = [#\X = Top]

inline
def uniqueContext (#X) : (XContext X)
= (ccode 0 R "intInt(XUniqueContext())")

inline def delete
  (#X d:Display xid:XID c:(XContext X)) : []
  = (ccode 0 E "XDeleteContext(D(#),W(#),I(#));" d xid c)
inline def find
  (#X d:Display xid:XID c:(XContext X)) : (External X)
  = (ccode 0 R "({char *data;
      (XFindContext(D(#),W(#),I(#),&data) ? (Val)NULL : (Val)data);
    })" d xid c)
inline def save
  (#X d:Display xid:XID c:(XContext X) x:(External X)) : []
  = (ccode 0 E "XSaveContext(D(#),W(#),I(#),(char*)#);" d xid c x)

def findContext
  (#X d:Display xid:XID c:(XContext X) fail:Exn) : X
= (val ext = (find d xid c)
   if (prim.nullPtr ext) then
     (exn.raise fail "xFindContext: XID not found")
   else
     (external.get ext))

def saveContext (#X d:Display xid:XID c:(XContext X) x:X) : []
= (val ext = (find d xid c)
   if (prim.nullPtr ext) then
     (save d xid c (external.make x))
   else
     ((external.delete ext); (save d xid c (external.make x))))

def deleteContext
  (#X d:Display xid:XID c:(XContext X) fail:Exn) : []
= (val ext = (find d xid c)
   if (prim.nullPtr ext) then
     (exn.raise fail "xDeleteContext: XID not found")
   else
     ((external.delete ext); (delete d xid c)))

val [#Xfunction] = [#Top]

val gXclear : Xfunction           {- 0                       -}
= (ccode 0 C "intInt(GXclear)")
val gXand : Xfunction             {- src AND dst             -}
= (ccode 0 C "intInt(GXand)")
val gXandReverse : Xfunction      {- src AND NOT dst         -}
= (ccode 0 C "intInt(GXandReverse)")
val gXcopy : Xfunction            {- src                     -}
= (ccode 0 C "intInt(GXcopy)")
val gXandInverted : Xfunction     {- (NOT src) AND dst       -}
= (ccode 0 C "intInt(GXandInverted)")
val gXnoop : Xfunction            {- dst                     -}
= (ccode 0 C "intInt(GXnoop)")
val gXxor : Xfunction             {- src XOR dst             -}
= (ccode 0 C "intInt(GXxor)")
val gXor : Xfunction              {- src OR dst              -}
= (ccode 0 C "intInt(GXor)")
val gXnor : Xfunction             {- (NOT src) AND (NOT dst) -}
= (ccode 0 C "intInt(GXnor)")
val gXequiv : Xfunction           {- (NOT src) XOR dst       -}
= (ccode 0 C "intInt(GXequiv)")
val gXinvert : Xfunction          {- NOT dst                 -}
= (ccode 0 C "intInt(GXinvert)")
val gXorReverse : Xfunction       {- src OR (NOT dst)        -}
= (ccode 0 C "intInt(GXorReverse)")
val gXcopyInverted : Xfunction    {- NOT src                 -}
= (ccode 0 C "intInt(GXcopyInverted)")
val gXorInverted : Xfunction      {- (NOT src) OR dst        -}
= (ccode 0 C "intInt(GXorInverted)")
val gXnand : Xfunction            {- (NOT src) OR (NOT dst)  -}
= (ccode 0 C "intInt(GXnand)")
val gXset : Xfunction             {- 1                       -}
= (ccode 0 C "intInt(GXset)")

val [#Color] = [#Top]

inline
def colorRed (c:Color) : Int
= (ccode 0 P "intInt(((XColor*)#)->red)" c)
inline
def colorGreen (c:Color) : Int
= (ccode 0 P "intInt(((XColor*)#)->green)" c)
inline
def colorBlue (c:Color) : Int
= (ccode 0 P "intInt(((XColor*)#)->blue)" c)

def allocColor
  (d:Display s:ScreenNum r:Int g:Int b:Int fail:(Handler [Int Int Int]))
  : Color
= (
   val color:Color = (ccode 0 R "(Val)malloc(sizeof(XColor))")
   (error.check "xAllocColor: malloc failed" (not(prim.nullPtr color)));
   val err:Int = (ccode 0 R "({
     XColor *rgb = (XColor*)#;
     rgb->red = I(#); rgb->green = I(#); rgb->blue = I(#);
     rgb->flags = (DoRed | DoGreen | DoBlue); rgb->pixel = 0;
     intInt(XAllocColor(D(#),DefaultColormap(D(#),I(#)),rgb));
   })" color r g b d d s)
   if (== err 0) then
     (exn.raise fail [r g b])
   else
     color
)

def allocNamedColor
  (d:Display s:ScreenNum name:String fail:Exn) : Color
= (
   val color:Color = (ccode 0 R "(Val)malloc(sizeof(XColor))")
   (error.check "xAllocNamedColor: malloc failed"
    (not (prim.nullPtr color)));
   val err:Int = (ccode 0 R "({
     XColor exact;
     intInt(XAllocNamedColor(D(#),DefaultColormap(D(#),I(#)),
                             S(#),(XColor*)#,&exact));
   })" d d s name color)
   if (== err 0) then
     (exn.raise fail name)
   else
     color
)

val [#Font] = [#Top]

inline
def loadQueryFont (d:Display name:String fail:Exn) : Font
= (val f:Font = (ccode 0 R "(Val)XLoadQueryFont(D(#),S(#))" d name)
   if (prim.nullPtr f) then (exn.raise fail (+$ "xLoadQueryFont: " name))
   else f)

inline
def freeFont (d:Display font:Font) : []
= (ccode 0 E "XFreeFont(D(#),(XFontStruct *)#);" d font)

inline
def textExtents (font:Font s:String) : TextExtents
= (ccode 8 W "({
   int dummy, ascent, descent; XCharStruct charStruct;
    XTextExtents((XFontStruct *)#,S(#),strlen(S(#)),
                 &dummy,&ascent,&descent,&charStruct);
    Free[0] = TUPLE(8);
    Free[1] = intInt(ascent); Free[2] = intInt(descent);
    Free[3] = intInt(charStruct.lbearing);
    Free[4] = intInt(charStruct.rbearing);
    Free[5] = intInt(charStruct.width);
    Free[6] = intInt(charStruct.ascent);
    Free[7] = intInt(charStruct.descent);
    Free += 8; TAG(Free-8);
  })" font s s)

val [#GC] = [#Top]

inline
def defaultGC (d:Display s:ScreenNum) : GC 
= (ccode 0 P "(Val)XDefaultGC(D(#),I(#))" d s)

inline
def setBackground (d:Display gc:GC c:Color) : []
= (ccode 0 E "XSetBackground(D(#),G(#),((XColor*)#)->pixel);" d gc c)

inline
def setForeground (d:Display gc:GC c:Color) : []
= (ccode 0 E "XSetForeground(D(#),G(#),((XColor*)#)->pixel);" d gc c)

inline
def setFunction (d:Display gc:GC f:Xfunction) : []
= (ccode 0 E "XSetFunction(D(#),G(#),I(#));" d gc f)

inline
def setFont (d:Display gc:GC font:Font) : []
= (ccode 0 E "XSetFont(D(#),G(#),((XFontStruct *)#)->fid);" d gc font)

val [#Drawable < XID] = [#XID]

def getGeometry (d:Display dr:Drawable) : Geometry
= (ccode 7 R "({
    Window root; int x,y,width,height,borderwidth,depth;
    XGetGeometry(D(#),W(#),&root,&x,&y,&width,&height,&borderwidth,&depth);
    Free[0] = TUPLE(7); Free[1] = intInt(x); Free[2] = intInt(y);
    Free[3] = intInt(width); Free[4] = intInt(height);
    Free[5] = intInt(borderwidth); Free[6] = intInt(depth);
    Free += 7; TAG(Free-7);
  })" d dr)

inline
def copyArea
  (d:Display src:Drawable dest:Drawable gc:GC 
   srcX:Int srcY:Int srcW:Int srcH:Int destX:Int destY:Int) : []
= (ccode 0 E "XCopyArea(D(#),W(#),W(#),G(#),I(#),I(#),I(#),I(#),I(#),I(#));" 
   d src dest gc srcX srcY srcW srcH destX destY)

inline
def copyPlane
  (d:Display src:Drawable dest:Drawable gc:GC srcX:Int srcY:Int 
   srcW:Int srcH:Int destX:Int destY:Int plane:Int) : []
= (ccode 0 E 
   "XCopyPlane(D(#),W(#),W(#),G(#),I(#),I(#),I(#),I(#),I(#),I(#),I(#));" 
   d src dest gc srcX srcY srcW srcH destX destY plane)

inline
def drawArc
  (d:Display dr:Drawable gc:GC x:Int y:Int w:Int h:Int a1:Int a2:Int) : []
= (ccode 0 E "XDrawArc(D(#),W(#),G(#),I(#),I(#),I(#),I(#),I(#),I(#));" 
   d dr gc x y w h a1 a2)

inline
def drawImageString
  (d:Display dr:Drawable gc:GC x:Int y:Int s:String) : []
= (ccode 0 E "XDrawImageString(D(#),W(#),G(#),I(#),I(#),S(#),I(#));" 
   d dr gc x y s (string.size s))

inline
def drawLine
  (d:Display dr:Drawable gc:GC x1:Int y1:Int x2:Int y2:Int) : []
= (ccode 0 E "XDrawLine(D(#),W(#),G(#),I(#),I(#),I(#),I(#));" 
   d dr gc x1 y1 x2 y2)

inline
def drawPoint (d:Display dr:Drawable gc:GC x:Int y:Int) : []
= (ccode 0 E "XDrawPoint(D(#),W(#),G(#),I(#),I(#));" d dr gc x y)

inline
def drawQuad
  (d:Display dr:Drawable gc:GC
   x1:Int y1:Int x2:Int y2:Int x3:Int y3:Int x4:Int y4:Int) : []
= (ccode 0 E "{
    XPoint p1 = {I(#),I(#)};
    XPoint p2 = {I(#),I(#)};
    XPoint p3 = {I(#),I(#)};
    XPoint p4 = {I(#),I(#)};
    XPoint points[5] = {p1,p2,p3,p4,p1};
    XDrawLines(D(#),W(#),G(#),points,5,CoordModeOrigin);
   }" x1 y1 x2 y2 x3 y3 x4 y4 d dr gc)

inline
def drawRectangle
  (d:Display dr:Drawable gc:GC x:Int y:Int w:Int h:Int) : []
= (ccode 0 E "XDrawRectangle(D(#),W(#),G(#),I(#),I(#),I(#),I(#));" 
   d dr gc x y w h)

inline
def drawString (d:Display dr:Drawable gc:GC x:Int y:Int s:String) : []
= (ccode 0 E "XDrawString(D(#),W(#),G(#),I(#),I(#),S(#),I(#));" 
   d dr gc x y s (string.size s))

inline
def drawTriangle
  (d:Display dr:Drawable gc:GC
   x1:Int y1:Int x2:Int y2:Int x3:Int y3:Int) : []
= (ccode 0 E "{
    XPoint p1 = {I(#),I(#)};
    XPoint p2 = {I(#),I(#)};
    XPoint p3 = {I(#),I(#)};
    XPoint points[4] = {p1,p2,p3,p1};
    XDrawLines(D(#),W(#),G(#),points,4,CoordModeOrigin);
   }" x1 y1 x2 y2 x3 y3 d dr gc)

inline
def fillArc
  (d:Display dr:Drawable gc:GC x:Int y:Int w:Int h:Int a1:Int a2:Int) : []
= (ccode 0 E "XFillArc(D(#),W(#),G(#),I(#),I(#),I(#),I(#),I(#),I(#));" 
   d dr gc x y w h a1 a2)

inline
def fillQuad
  (d:Display dr:Drawable gc:GC
   x1:Int y1:Int x2:Int y2:Int x3:Int y3:Int x4:Int y4:Int) : []
= (ccode 0 E "{
    XPoint p1 = {I(#),I(#)};
    XPoint p2 = {I(#),I(#)};
    XPoint p3 = {I(#),I(#)};
    XPoint p4 = {I(#),I(#)};
    XPoint points[5] = {p1,p2,p3,p4,p1};
    XFillPolygon(D(#),W(#),G(#),points,5,Complex,CoordModeOrigin);
   }" x1 y1 x2 y2 x3 y3 x4 y4 d dr gc)

inline
def fillRectangle
  (d:Display dr:Drawable gc:GC x:Int y:Int w:Int h:Int) : []
= (ccode 0 E "XFillRectangle(D(#),W(#),G(#),I(#),I(#),I(#),I(#));" 
   d dr gc x y w h)

inline
def fillTriangle
  (d:Display dr:Drawable gc:GC
   x1:Int y1:Int x2:Int y2:Int x3:Int y3:Int) : []
= (ccode 0 E "{
    XPoint p1 = {I(#),I(#)};
    XPoint p2 = {I(#),I(#)};
    XPoint p3 = {I(#),I(#)};
    XPoint points[4] = {p1,p2,p3,p1};
    XFillPolygon(D(#),W(#),G(#),points,4,Convex,CoordModeOrigin);
   }" x1 y1 x2 y2 x3 y3 d dr gc)

val [#Pixmap < Drawable] = [#Drawable]

inline
def createPixmap
  (d:Display dr:Drawable width:Int height:Int depth:Int) : Pixmap
= (ccode 0 R "intInt(XCreatePixmap(D(#),W(#),I(#),I(#),I(#)))" 
   d dr width height depth)

inline
def freePixmap (d:Display p:Pixmap) : []
= (ccode 0 E "XFreePixmap(D(#),W(#));" d p)

val [#Window < Drawable] = [#Drawable]

inline
def createWindow
  (d:Display win:Window x:Int y:Int w:Int h:Int 
   borderWidth:Int border:Color bg:Color) : Window 
= (ccode 0 R "
    intInt(XCreateSimpleWindow(D(#),W(#),I(#),I(#),I(#),I(#),I(#),
           ((XColor*)#)->pixel,((XColor*)#)->pixel))
   " d win x y w h borderWidth border bg)

inline
def defaultRootWindow (d:Display) : Window 
= (ccode 0 P "intInt(XDefaultRootWindow(D(#)))" d)

inline
def destroyWindow (d:Display win:Window) : []
= (ccode 0 E "XDestroyWindow(D(#),W(#));" d win)

inline
def mapWindow (d:Display win:Window) : []
= (ccode 0 E "XMapWindow(D(#),W(#));" d win)

inline
def unmapWindow (d:Display win:Window) : []
= (ccode 0 E "XUnmapWindow(D(#),W(#));" d win)

inline
def moveWindow (d:Display win:Window x:Int y:Int) : []
= (ccode 0 E "XMoveWindow(D(#),W(#),I(#),I(#));" d win x y)

inline
def resizeWindow (d:Display win:Window w:Int h:Int) : []
= (ccode 0 E "XResizeWindow(D(#),W(#),I(#),I(#));" d win w h)

inline
def moveResizeWindow (d:Display win:Window x:Int y:Int w:Int h:Int) : []
= (ccode 0 E "XMoveResizeWindow(D(#),W(#),I(#),I(#),I(#),I(#));" 
   d win x y w h)

inline
def clearWindow (d:Display win:Window) : []
= (ccode 0 E "XClearWindow(D(#),W(#));" d win)

inline
def clearArea
  (d:Display win:Window x:Int y:Int w:Int h:Int exposeEvent:Bool) : []
= (ccode 0 E "XClearArea(D(#),W(#),I(#),I(#),I(#),I(#),#);" 
   d win x y w h exposeEvent)

inline
def setWindowBackground (d:Display win:Window c:Color) : []
= (ccode 0 E "XSetWindowBackground(D(#),W(#),((XColor*)#)->pixel);" d win c)

inline
def setWindowBackgroundPixmap (d:Display win:Window p:Pixmap) : []
= (ccode 0 E "XSetWindowBackgroundPixmap(D(#),W(#),I(#));" d win p)

inline
def setWindowBorder (d:Display win:Window c:Color) : []
= (ccode 0 E "XSetWindowBorder(D(#),W(#),((XColor*)#)->pixel);" d win c)

inline
def setWindowBorderWidth (d:Display win:Window width:Int) : []
= (ccode 0 E "XSetWindowBorderWidth(D(#),W(#),I(#));" d win width)

inline
def storeName (d:Display win:Window s:String) : []
= (ccode 0 E "XStoreName(D(#),W(#),S(#));" d win s)

inline
def withdrawWindow (d:Display win:Window s:ScreenNum) : Bool
= (ccode 0 W "(XWithdrawWindow(D(#),W(#),I(#)) != 0)" d win s)

val [#KeySym < Int] = [#Int]

val XKHome : KeySym
= (ccode 0 R "intInt(XK_Home)")
val XKLeft : KeySym
= (ccode 0 R "intInt(XK_Left)")
val XKRight : KeySym
= (ccode 0 R "intInt(XK_Right)")
val XKUp : KeySym
= (ccode 0 R "intInt(XK_Up)")
val XKDown : KeySym
= (ccode 0 R "intInt(XK_Down)")

type Button
= Int
val button1 : Button
= 1
val button2 : Button
= 2
val button3 : Button
= 3
val button4 : Button
= 4
val button5 : Button
= 5

inline
def eqButton (b1:Button b2:Button) : Bool
= (== b1 b2)

inline
def buttonString (b:Button) : String
= if (== b button1) then "button1"
  else if (== b button2) then "button2"
  else if (== b button3) then "button3"
  else if (== b button4) then "button4"
  else "button5"

val [#XEvent] = [#Top]

inline
def allocEvent () : XEvent
= (val e:XEvent = (ccode 0 R "(Val)malloc(sizeof(XEvent))")
   (error.check "allocEvent: malloc failed" (not (prim.nullPtr e)));
   e)

inline
def nextEvent (d:Display e:XEvent) : []
= (ccode 0 E "XNextEvent(D(#), (XEvent *)#);" d e)

inline
def pending (d:Display) : Int
= (ccode 0 R "intInt(XPending(D(#)))" d)

inline
def isExpose (e:XEvent) : Bool
= (ccode 0 R "(((XEvent *)#)->type == Expose)" e)
inline
def exposeEventWindow (e:XEvent) : Window
= (ccode 0 R "intInt(((XEvent *)#)->xexpose.window)" e)
inline
def exposeEventX (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xexpose.x)" e)
inline
def exposeEventY (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xexpose.y)" e)
inline
def exposeEventW (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xexpose.width)" e)
inline
def exposeEventH (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xexpose.height)" e)

inline
def isButtonPress (e:XEvent) : Bool
= (ccode 0 R "(((XEvent *)#)->type == ButtonPress)" e)
inline
def isButtonRelease (e:XEvent) : Bool
= (ccode 0 R "(((XEvent *)#)->type == ButtonRelease)" e)
inline
def buttonEventWindow (e:XEvent) : Window
= (ccode 0 R "intInt(((XEvent *)#)->xbutton.window)" e)
inline
def buttonEventX (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xbutton.x)" e)
inline
def buttonEventY (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xbutton.y)" e)
inline
def buttonEventButton (e:XEvent) : Button
= (ccode 0 R "intInt(((XEvent *)#)->xbutton.button)" e)

inline
def isButtonMotion (e:XEvent) : Bool
= (ccode 0 R "(((XEvent *)#)->type == MotionNotify)" e)
inline
def buttonMotionEventWindow (e:XEvent) : Window
= (ccode 0 R "intInt(((XEvent *)#)->xmotion.window)" e)
inline
def buttonMotionEventX (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xmotion.x)" e)
inline
def buttonMotionEventY (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xmotion.y)" e)
inline
def buttonMotionEventTime (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xmotion.time)" e)

inline
def isConfigureNotify (e:XEvent) : Bool
= (ccode 0 R "(((XEvent *)#)->type == ConfigureNotify)" e)
inline
def configureEventWindow (e:XEvent) : Window
= (ccode 0 R "intInt(((XEvent *)#)->xconfigure.window)" e)
inline
def configureEventX (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xconfigure.x)" e)
inline
def configureEventY (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xconfigure.y)" e)
inline
def configureEventW (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xconfigure.width)" e)
inline
def configureEventH (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xconfigure.height)" e)

inline
def isKeyPress (e:XEvent) : Bool
= (ccode 0 R "(((XEvent *)#)->type == KeyPress)" e)
inline
def isKeyRelease (e:XEvent) : Bool
= (ccode 0 R "(((XEvent *)#)->type == KeyRelease)" e)
inline
def keyEventWindow (e:XEvent) : Window
= (ccode 0 R "intInt(((XEvent *)#)->xkey.window)" e)
inline
def keyEventX (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xkey.x)" e)
inline
def keyEventY (e:XEvent) : Int
= (ccode 0 R "intInt(((XEvent *)#)->xkey.y)" e)
def keyEventString (e:XEvent) : String
= (ccode 0 R "({
    int len; char *res; char buffer[20]; KeySym keysym;
    len = XLookupString(&(((XEvent*)#)->xkey),buffer,19,&keysym,NULL);
    buffer[len] = 0; res = (char *)malloc(len+1);
    strcpy(res,(char *)&buffer); (Val)res;
   })" e)
def keyEventKeySym (e:XEvent) : KeySym
= (ccode 0 R "({
    KeySym keysym;
    XLookupString(&(((XEvent*)#)->xkey),NULL,0,&keysym,NULL);
    intInt(keysym);
   })" e)

val [#EventMask] = [#Top]

val noEventMask : EventMask = (ccode 0 C "intInt(NoEventMask)")
val keyPressMask : EventMask = (ccode 0 C "intInt(KeyPressMask)")
val keyReleaseMask : EventMask = (ccode 0 C "intInt(KeyReleaseMask)")
val buttonPressMask : EventMask = (ccode 0 C "intInt(ButtonPressMask)")
val buttonReleaseMask : EventMask = (ccode 0 C "intInt(ButtonReleaseMask)")
val enterWindowMask : EventMask = (ccode 0 C "intInt(EnterWindowMask)")
val leaveWindowMask : EventMask = (ccode 0 C "intInt(LeaveWindowMask)")
val pointerMotionMask : EventMask = (ccode 0 C "intInt(PointerMotionMask)")
val pointerMotionHintMask : EventMask =
  (ccode 0 C "intInt(PointerMotionHintMask)")
val button1MotionMask : EventMask = (ccode 0 C "intInt(Button1MotionMask)")
val button2MotionMask : EventMask = (ccode 0 C "intInt(Button2MotionMask)")
val button3MotionMask : EventMask = (ccode 0 C "intInt(Button3MotionMask)")
val button4MotionMask : EventMask = (ccode 0 C "intInt(Button4MotionMask)")
val button5MotionMask : EventMask = (ccode 0 C "intInt(Button5MotionMask)")
val buttonMotionMask : EventMask = (ccode 0 C "intInt(ButtonMotionMask)")
val keymapStateMask : EventMask = (ccode 0 C "intInt(KeymapStateMask)")
val exposureMask : EventMask = (ccode 0 C "intInt(ExposureMask)")
val visibilityChangeMask : EventMask =
  (ccode 0 C "intInt(VisibilityChangeMask)")
val structureNotifyMask : EventMask = (ccode 0 C "intInt(StructureNotifyMask)")
val resizeRedirectMask : EventMask = (ccode 0 C "intInt(ResizeRedirectMask)")
val substructureNotifyMask : EventMask =
  (ccode 0 C "intInt(SubstructureNotifyMask)")
val substructureRedirectMask : EventMask =
  (ccode 0 C "intInt(SubstructureRedirectMask)")
val focusChangeMask : EventMask = (ccode 0 C "intInt(FocusChangeMask)")
val propertyChangeMask : EventMask = (ccode 0 C "intInt(PropertyChangeMask)")
val colormapChangeMask : EventMask = (ccode 0 C "intInt(ColormapChangeMask)")
val ownerGrabButtonMask : EventMask = (ccode 0 C "intInt(OwnerGrabButtonMask)")

inline
def selectInput (d:Display win:Window m:EventMask) : []
= (ccode 0 E "XSelectInput(D(#),W(#),I(#));" d win m)

inline
def mergeMasks (m1:EventMask m2:EventMask) : EventMask
= (ccode 0 C "(# | #)" m1 m2)

inline
def bell (d:Display volume:Int) : []
= (ccode 0 E "XBell(D(#),I(#));" d volume)

[#Display #ScreenNum #XID #XContext #Xfunction #Color #Font #TextExtents #GC
 #Drawable #Pixmap #Window #Geometry #KeySym #Button #XEvent #EventMask
 [openDisplay=openDisplay closeDisplay=closeDisplay displayFd=displayFd
 synchronize=synchronize flush=flush defaultScreen=defaultScreen
 defaultDepth=defaultDepth uniqueContext=uniqueContext
 findContext=findContext saveContext=saveContext
 deleteContext=deleteContext gXclear=gXclear gXand=gXand
 gXandReverse=gXandReverse gXcopy=gXcopy gXandInverted=gXandInverted
 gXnoop=gXnoop gXxor=gXxor gXor=gXor gXnor=gXnor gXequiv=gXequiv
 gXinvert=gXinvert gXorReverse=gXorReverse gXcopyInverted=gXcopyInverted
 gXorInverted=gXorInverted gXnand=gXnand gXset=gXset colorRed=colorRed
 colorGreen=colorGreen colorBlue=colorBlue allocColor=allocColor
 allocNamedColor=allocNamedColor loadQueryFont=loadQueryFont
 freeFont=freeFont textExtents=textExtents defaultGC=defaultGC
 setBackground=setBackground setForeground=setForeground
 setFunction=setFunction setFont=setFont getGeometry=getGeometry
 copyArea=copyArea copyPlane=copyPlane drawArc=drawArc fillArc=fillArc
 drawImageString=drawImageString drawLine=drawLine drawPoint=drawPoint
 drawQuad=drawQuad fillQuad=fillQuad drawRectangle=drawRectangle
 fillRectangle=fillRectangle drawString=drawString
 drawTriangle=drawTriangle fillTriangle=fillTriangle
 createPixmap=createPixmap freePixmap=freePixmap
 createWindow=createWindow defaultRootWindow=defaultRootWindow
 destroyWindow=destroyWindow mapWindow=mapWindow unmapWindow=unmapWindow
 moveWindow=moveWindow resizeWindow=resizeWindow
 moveResizeWindow=moveResizeWindow clearWindow=clearWindow
 clearArea=clearArea setWindowBackground=setWindowBackground
 setWindowBackgroundPixmap=setWindowBackgroundPixmap
 setWindowBorder=setWindowBorder setWindowBorderWidth=setWindowBorderWidth
 storeName=storeName withdrawWindow=withdrawWindow XKHome=XKHome
 XKLeft=XKLeft XKRight=XKRight XKUp=XKUp XKDown=XKDown button1=button1
 button2=button2 button3=button3 button4=button4 button5=button5
 eqButton=eqButton buttonString=buttonString allocEvent=allocEvent
 nextEvent=nextEvent pending=pending isExpose=isExpose
 exposeEventWindow=exposeEventWindow exposeEventX=exposeEventX
 exposeEventY=exposeEventY exposeEventW=exposeEventW
 exposeEventH=exposeEventH isButtonPress=isButtonPress
 isButtonRelease=isButtonRelease buttonEventWindow=buttonEventWindow
 buttonEventX=buttonEventX buttonEventY=buttonEventY
 buttonEventButton=buttonEventButton isButtonMotion=isButtonMotion
 buttonMotionEventWindow=buttonMotionEventWindow
 buttonMotionEventX=buttonMotionEventX
 buttonMotionEventY=buttonMotionEventY
 buttonMotionEventTime=buttonMotionEventTime
 isConfigureNotify=isConfigureNotify
 configureEventWindow=configureEventWindow configureEventX=configureEventX
 configureEventY=configureEventY configureEventW=configureEventW
 configureEventH=configureEventH isKeyPress=isKeyPress
 isKeyRelease=isKeyRelease keyEventWindow=keyEventWindow
 keyEventX=keyEventX keyEventY=keyEventY keyEventString=keyEventString
 keyEventKeySym=keyEventKeySym noEventMask=noEventMask
 keyPressMask=keyPressMask keyReleaseMask=keyReleaseMask
 buttonPressMask=buttonPressMask buttonReleaseMask=buttonReleaseMask
 enterWindowMask=enterWindowMask leaveWindowMask=leaveWindowMask
 pointerMotionMask=pointerMotionMask
 pointerMotionHintMask=pointerMotionHintMask
 button1MotionMask=button1MotionMask button2MotionMask=button2MotionMask
 button3MotionMask=button3MotionMask button4MotionMask=button4MotionMask
 button5MotionMask=button5MotionMask buttonMotionMask=buttonMotionMask
 keymapStateMask=keymapStateMask exposureMask=exposureMask
 visibilityChangeMask=visibilityChangeMask
 structureNotifyMask=structureNotifyMask
 resizeRedirectMask=resizeRedirectMask
 substructureNotifyMask=substructureNotifyMask
 substructureRedirectMask=substructureRedirectMask
 focusChangeMask=focusChangeMask propertyChangeMask=propertyChangeMask
 colormapChangeMask=colormapChangeMask
 ownerGrabButtonMask=ownerGrabButtonMask selectInput=selectInput
 mergeMasks=mergeMasks bell=bell]]

)
